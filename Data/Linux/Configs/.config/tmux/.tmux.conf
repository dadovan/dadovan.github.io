# : << EOF

# With help from:
# https://github.com/gpakosz/.tmux
#
# To debug, simply run from the terminal (to test ssh functionaity, ssh donovans@localhost first):
#     cut -c3- ~/.config/tmux/.tmux.conf | zsh -x -s _test

# TODO: Can I change the border of individual panes (ie, highlight ssh's into prod)?
# TODO: Make ~/.config/tmux/.tmux.conf (maybe | zsh as well) a variable

### Icon ###
set-option -g '@LessThan' 'ÓÇ≤'
set-option -g '@GreaterThan' 'ÓÇ∞'
set-option -g '@LeftBubble' 'ÓÇ∂'
set-option -g '@RightBubble' 'ÓÇ¥'
set-option -g '@Clock' 'üïò'

### Theme ###
set-option -g '@Nord1' 'yellow' #3B4252'

# TODO: How can I use @Nord1 here?
set-option -g '@ThemeColor1' '#[fg=white,bg=#5E81AC]'
set-option -g '@ThemeColor1Reverse' '#[fg=#5E81AC,bg=white]'
set-option -g '@ThemeColor1ReverseBlack' '#[fg=#5E81AC,bg=#3B4252]'
set-option -g '@ThemeColor2' '#[fg=black,bg=#88C0D0]'
set-option -g '@ThemeColor2Reverse' '#[fg=#88C0D0,bg=#3B4252]'

### General ###
set-option -g default-terminal screen-256color

set-option -g history-limit 50000

set-option -g mouse on
set-option -g base-index 1  # Set window base index (not pane-base-index)
set-window-option -g monitor-activity off
set-option -g visual-activity off

set-window-option -g window-style fg=colour240,bg=black
set-window-option -g window-active-style fg=white,bg=black

### Status bar ###
set-option -g status-position top

set-option -g status-style "fg=black,bg=#3B4252"
#set-option -g status-bg "#{@Nord1}"

# set-option -g window-status-style fg=cyan,bg=colour235
# set-option -g window-status-current-style fg=white,bold,bg=red
# set-option -g window-status-current-style fg=white,bold,bg=red
set-option -g window-status-style fg=#8a8a8a,bg=#080808
set-option -g window-status-last-style fg=#00afff,bg=#303030
set-option -g window-status-current-style fg=#080808,bg=#00afff,bright

set-option -g status-left-length 90
# set-option -g status-left "#[fg=black]#S | "
# set-option -ag status-left "#[fg=blue]#(hostname) | "
# set-option -ag status-left "#[fg=black](#(ifconfig | grep 'inet ' | grep -v 127.0.0.1 | awk '{print $2}'))"
# set-option -g status-left "#[fg=#080808,bg=#ffff00] #S #[default] "
# set-option -ag status-left "#[fg=#080808,bg=#ffff00] #(whoami) #[default] "
# set-option -ag status-left "#[fg=#080808,bg=#ffff00] #H #[default] "
set-option -g status-left "#[fg=#080808,bg=#e4e4e4,bold] #S #{pane_index} #[default] "
#set-option -ag status-left "#[fg=#080808,bg=#e4e4e4,bold] #{@status_username} #[default]@"
set-option -ag status-left "#{@ThemeColor1}#[bold] #{@status_username} #[nobold]@#[bold] #{@status_hostname} #[default] "
#set-option -ag status-left "#[fg=white,bg=brightblack](#(ifconfig | grep 'inet ' | grep -v 127.0.0.1 | awk '{print $2}')) #[default]"
set-option -ag status-left "#{@ThemeColor1} #{pane_current_command} #[default] "

#set-option -g window-status-format "#[fg=black,bg=brightblack,nobold,noitalics,nounderscore]ÓÇ∞ #[fg=white,bg=brightblack]#I #[fg=white,bg=brightblack,nobold,noitalics,nounderscore]ÓÇ± #[fg=white,bg=brightblack]#W #F #[fg=brightblack,bg=black,nobold,noitalics,nounderscore]ÓÇ∞"
#set-option -g window-status-current-format "#[fg=black,bg=cyan,nobold,noitalics,nounderscore]ÓÇ∞ #[fg=black,bg=cyan]#I #[fg=black,bg=cyan,nobold,noitalics,nounderscore]ÓÇ± #[fg=black,bg=cyan]#W #F #[fg=cyan,bg=black,nobold,noitalics,nounderscore]ÓÇ∞"
#set-option -g window-status-last-format "#[fg=black,bg=brightblack,nobold,noitalics,nounderscore]ÓÇ∞ #[fg=white,bg=brightblack]#I #[fg=white,bg=brightblack,nobold,noitalics,nounderscore]ÓÇ± #[fg=white,bg=brightblack]#W #F #[fg=brightblack,bg=black,nobold,noitalics,nounderscore]ÓÇ∞"
#set-option -g window-status-last-style "#[fg=cyan,bg=black,nobold,noitalics,nounderscore]"

set-option -g status-justify centre
set-option -g window-status-last-style ""
set-option -g window-status-separator " "
set-option -g window-status-current-format "#{@ThemeColor2Reverse}#{@LessThan}#{@ThemeColor2}#[bold] #I ÓÇ± #W #F #[nobold]#{@ThemeColor2Reverse}#{@GreaterThan}#[default]"
set-option -g window-status-format "#{@ThemeColor1ReverseBlack}#{@LeftBubble}#{@ThemeColor1}#[bold] #I #[nobold]ÓÇ± #W #[bold]#F#[nobold] #{@ThemeColor1ReverseBlack}#{@RightBubble}#[default]"

set-option -g status-right-length 60
set-option -g status-right "#(cut -c3- ~/.config/tmux/.tmux.conf | zsh -s _load_status_bar_widgets)"
# set-option -ag status-right "#{@status_cpu_usage} | "
# set-option -ag status-right "#[fg=blue] %H:%M %Y %d %b"
#set-option -ag status-right "#[fg=#e4e4e4,bg=#d70000]#{@status_cpu_usage}#[default]  "
set-option -ag status-right "#{@ThemeColor1} #{@status_cpu_usage} #[default]  " # #[fg=white,bg=brightblack]
set-option -ag status-right "#{@ThemeColor1} %H:%M %Y %d %b "

### Key bindings ###
bind-key R {
    source-file ~/.config/tmux/.tmux.conf
    display-message "Reloaded!"
}

bind-key y select-window -l     # Last window
bind-key u select-window -p
bind-key o select-window -n

bind-key r command-prompt -I'#W' "rename-window -- '%%'"

bind-key | split-window -h
bind-key - split-window -v

bind-key t select-layout main-vertical
bind-key b select-layout main-horizontal
bind-key g select-layout tiled

bind-key -n M-~ {
    select-layout main-vertical
    select-pane -t top-right
    split-window -v "htop"
    swap-pane -U
    resize-pane -x 80 -y 24
}
bind-key ? {
    new-window -t 0
    set-window-option -t 0 remain-on-exit on
    send-keys "mdless ~/.config/tmux/help.md"
    send-keys enter
}

# Naivate panes with j i l and ,
bind-key j select-pane -L
bind-key l select-pane -R
bind-key i select-pane -U
bind-key , select-pane -D

# M-[1..0] Switch between windows 1-10
bind-key -n M-1 if-shell "tmux select-window -t 1" "" "new-window -t 1"
bind-key -n M-2 if-shell "tmux select-window -t 2" "" "new-window -t 2"
bind-key -n M-3 if-shell "tmux select-window -t 3" "" "new-window -t 3"
bind-key -n M-4 if-shell "tmux select-window -t 4" "" "new-window -t 4"
bind-key -n M-5 if-shell "tmux select-window -t 5" "" "new-window -t 5"
bind-key -n M-6 if-shell "tmux select-window -t 6" "" "new-window -t 6"
bind-key -n M-7 if-shell "tmux select-window -t 7" "" "new-window -t 7"
bind-key -n M-8 if-shell "tmux select-window -t 8" "" "new-window -t 8"
bind-key -n M-9 if-shell "tmux select-window -t 9" "" "new-window -t 9"
bind-key -n M-0 if-shell "tmux select-window -t 0" "" "new-window -t 0"

# M-S-[1..0] Moves the current pane to windows 1-10
bind-key -n M-! if-shell "tmux join-pane -t 1" "" "new-window -dt 1; join-pane -t 1; select-pane -t top-left; kill-pane" \; select-layout \; select-layout -E
bind-key -n M-@ if-shell "tmux join-pane -t 2" "" "new-window -dt 2; join-pane -t 2; select-pane -t top-left; kill-pane" \; select-layout \; select-layout -E
bind-key -n M-# if-shell "tmux join-pane -t 3" "" "new-window -dt 3; join-pane -t 3; select-pane -t top-left; kill-pane" \; select-layout \; select-layout -E
bind-key -n M-$ if-shell "tmux join-pane -t 4" "" "new-window -dt 4; join-pane -t 4; select-pane -t top-left; kill-pane" \; select-layout \; select-layout -E
bind-key -n M-% if-shell "tmux join-pane -t 5" "" "new-window -dt 5; join-pane -t 5; select-pane -t top-left; kill-pane" \; select-layout \; select-layout -E
bind-key -n M-^ if-shell "tmux join-pane -t 6" "" "new-window -dt 6; join-pane -t 6; select-pane -t top-left; kill-pane" \; select-layout \; select-layout -E
bind-key -n M-& if-shell "tmux join-pane -t 7" "" "new-window -dt 7; join-pane -t 7; select-pane -t top-left; kill-pane" \; select-layout \; select-layout -E
bind-key -n M-* if-shell "tmux join-pane -t 8" "" "new-window -dt 8; join-pane -t 8; select-pane -t top-left; kill-pane" \; select-layout \; select-layout -E
bind-key -n M-( if-shell "tmux join-pane -t 9" "" "new-window -dt 9; join-pane -t 9; select-pane -t top-left; kill-pane" \; select-layout \; select-layout -E
bind-key -n M-) if-shell "tmux join-pane -t 0" "" "new-window -dt 0; join-pane -t 0; select-pane -t top-left; kill-pane" \; select-layout \; select-layout -E

bind-key -n M-Q kill-pane

#bind-key U run-shell "~/.config/.tmux/resize.sh"
bind-key U {
    run 'cut -c3- ~/.config/tmux/.tmux.conf | zsh -s resize_pane_to_main'
}

#bind-key z run 'cut -c3- ~/.config/.tmux/.tmux.conf | zsh -x -s _test'
#bind-key Z run 'zsh -s /Users/donovans/temp/test.sh'

#rename-session -t0 "main"
run 'cut -c3- ~/.config/tmux/.tmux.conf | zsh -s _apply_configuration'

# EOF
#
# # exit the script if any statement returns a non-true return value
# set -e
#
# resize_pane_to_main() {
#     percentage=66
#
#     WIDTH=$(expr $(tmux display -p '#{window_width}') \* $percentage \/ 100)
#     HEIGHT=$(expr $(tmux display -p '#{window_height}'))
#
#     tmux swap-pane -t 0
#     tmux select-pane -t 0
#     tmux select-layout main-vertical
#     tmux resize-pane -t 0 -x $WIDTH -y $HEIGHT
#
#     exit 0
# }
#
# cpu_usage_status_widget() {
# }
#
# _get_cpu_usage_status() {
#     cache_until=$(tmux show-option -gv '@status_cpu_usage_cache_until')
#     now=$(date +%Y%m%d%H%M%S)
#
#     if [[ $now > $cache_until ]]; then
#         #local stats=$(iostat -c 2 disk0 | sed '/^\s*$/d' | tail -n 1 | awk -v format="%d %d %d %d" '{usage=100-$6} {l1=$7} {l5=$8} {l15=$9} END {printf(format, usage, $7, $8, $9)}' | sed 's/,/./')
#         local stats=$(iostat -c 1 1 | sed '/^\s*$/d' | tail -n 1 | awk -v format="%d" '{usage=100-$6} END {printf(format, usage)}' | sed 's/,/./')
#         eval set -- $stats
#         local cpu_load=$1
#         #local cpu_avg_1m=$2
#         #local cpu_avg_5m=$3
#         #local cpu_avg_15m=$4
#         #eval set -- "‚ñè ‚ñé ‚ñç ‚ñå ‚ñã ‚ñä ‚ñâ ‚ñà"
#         eval set -- "‚ñÅ ‚ñÇ ‚ñÉ ‚ñÑ ‚ñÖ ‚ñÜ ‚ñá ‚ñà"
#         (( number_of_buckets = 100 / 8 ))
#         setopt no_err_exit # Needed because arithmetic expression returns exit code 1 if bucket = 0 (Ubuntu)
#         (( bucket = $cpu_load / 8 ))
#         setopt err_exit
#         if [[ $bucket -gt 7 ]]; then bucket=7; fi
#         eval $(awk "BEGIN { printf \"cpu_icon=$%d\", ($bucket + 1) }")
#
#         usage_history=$(tmux show-option -gv '@status_cpu_usage_history')
#         tmux set-option -g '@status_cpu_usage' "[$usage_history] $cpu_icon $cpu_load" # ($cpu_avg_15m)"
#         tmux set-option -g '@status_cpu_usage_cache_until' $(date +%Y%m%d%H%M%S --date '15 seconds') # $(date -v +15S +%Y%m%d%H%M%S)
#         usage_history="$usage_history[2,-1]$cpu_icon"
#         tmux set-option -g '@status_cpu_usage_history' "$usage_history"
#     fi
# }
#
# _load_status_bar_widgets() {
#     _get_username_and_hostname
#     _get_cpu_usage_status
# }
#
# _apply_configuration() {
#     tmux set-option -g '@status_cpu_usage_cache_until' $(date +%Y%m%d%H%M%S --date '1 hour ago') # $(date -v -1H +%Y%m%d%H%M%S)
#     tmux set-option -g '@status_cpu_usage_history' "     "
#     tmux set-option -g '@status_cpu_usage' "[     ] ? --" #" (--)"
# }
#
# _tty_info() {
#     tty="${1##/dev/}"
#     ps -t "$tty" -o user=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX -o pid= -o ppid= -o command= | awk '
#         NR > 1 && ((/ssh/ && !/-W/) || !/ssh/) {
#             user[$2] = $1; parent[$2] = $3; child[$3] = $2; pid=$2; $1 = $2 = $3 = ""; command[pid] = substr($0,4)
#         }
#         END {
#             for (i in parent)
#             {
#                 j = i
#                 while (parent[j])
#                 j = parent[j]
#
#                 if (!(i in child) && j != 1)
#                 {
#                     print i":"user[i]":"command[i]
#                    exit
#                 }
#             }
#         }
#         '
# }
#
# _get_username_and_hostname() {
#     tty=$(tmux display -p '#{pane_tty}')
#     tty_info=$(_tty_info "$tty")
#     username=${tty_info#*:}
#     tmux set-option -g '@status_username' "${username%%:*}"
#
#     command=${tty_info#*:}
#     command=${command#*:}
#     eval set -- $command
#     if [[ $1 == "ssh" ]]; then
#         ssh_args=$(printf '%s' "$command" | perl -n -e 'print if s/(.*?)\bssh\b\s+(.*)/\2/')
#         hostname=$(ssh -G $ssh_args 2>/dev/null | awk '/^hostname / { print $2; exit }')
#         parts=(${(s[.])hostname})
#         tmux set-option -g '@status_hostname' "$parts[1]"
#     else
#         tmux set-option -g '@status_hostname' "$(hostname)"
#     fi
# }
#
# "$@"
